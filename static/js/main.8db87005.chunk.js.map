{"version":3,"sources":["redux/actions/editContactAction.js","redux/actions/getContactsAction.js","redux/selectors.js","components/Form/Form.jsx","redux/operations/operations.js","components/Contascts/Contacts.jsx","redux/actions/filterAction.js","components/Filter/Filter.jsx","components/Alert/Alert.jsx","components/App/App.jsx","redux/reducers/editContactReducer.js","redux/reducers/filterReducer.js","redux/store/rootReducer.js","redux/store/store.js","index.js"],"names":["addNumberRequest","createAction","addNumberSuccess","addNumberError","deleteContactRequest","deleteContactSuccess","deleteContactError","getNumberRequest","getNumberSuccess","getNumberError","getContactsArr","state","contacts","getFilter","filter","Form","name","number","handleChange","target","value","setState","handlerSubmit","e","preventDefault","props","addNumber","checkContact","contact","newContact","prevState","id","shortId","generate","this","className","onSubmit","htmlFor","onChange","type","Component","mapDispatchToProps","dispatch","axios","post","then","res","catch","err","connect","Contacts","deleteContacts","TransitionGroup","component","map","el","CSSTransition","timeout","classNames","onClick","delete","filterContact","Filter","handleFilter","Alert","ok","App","showLogo","contactExist","findContact","filterWord","toLowerCase","includes","find","alertOk","getContacts","searchedContacts","in","unmountOnExit","get","data","editContacts","createReducer","payload","filterContacts","action","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8db87005.chunk.js","sourcesContent":["// import types from '../types.js';\nimport {createAction} from '@reduxjs/toolkit';\n\nexport const addNumberRequest = createAction('ADD_NUMBER_START');\nexport const addNumberSuccess = createAction('ADD_NUMBER_SUCCESS');\nexport const addNumberError = createAction('ADD_NUMBER_ERROR');\n\nexport const deleteContactRequest = createAction(\"DELETE_CONTACT_START\");\nexport const deleteContactSuccess = createAction(\"DELETE_CONTACT_SUCCESS\");\nexport const deleteContactError = createAction(\"DELETE_CONTACT_ERROR\");\n\n// export const getContact = ({name, number, id}) => (\n//     {\n//         type: types.ADD_CONTACT,\n//         payload: {\n//             name,\n//             number,\n//             id,\n//         }\n//     }\n// )\n\n// export const deleteContact = (id) => ({\n//     type: types.DELETE_CONTACT,\n//     payload: {\n//         id,\n//     }\n// })","import {createAction} from '@reduxjs/toolkit';\n\nexport const getNumberRequest = createAction('GET_NUMBER_START');\nexport const getNumberSuccess = createAction('GET_NUMBER_SUCCESS');\nexport const getNumberError = createAction('GET_NUMBER_ERROR');","export const getContactsArr = state => state.contacts;\n\nexport const getFilter = state => state.filter;","import React, {Component} from 'react';\nimport shortId from 'short-id';\nimport './Form.css';\nimport {connect} from 'react-redux';\nimport {addNumber} from '../../redux/operations/operations';\nimport {getContactsArr} from '../../redux/selectors';\n\nclass Form extends Component {\n\n    state = {\n        name: \"\",\n        number: \"\"\n    };\n\n    handleChange = ({target}) => {\n        \n        const {name, value} = target;\n\n        this.setState( {[name]: value} );\n         \n    };\n            \n    handlerSubmit = (e) => {\n\n        e.preventDefault();\n        const {addNumber, checkContact, contacts} = this.props;\n        const contact = this.newContact();\n        if(checkContact(contacts, contact) === false) {addNumber(contact)};\n        this.setState(prevState => { \n            return {name: '', number: ''}\n        });\n\n    };\n\n    newContact = () => {\n\n        const {name, number} = this.state;\n        return {name: name, number: number, id: shortId.generate()};\n\n    };\n\n    render() {\n\n        const {name, number} = this.state;\n\n        return(\n            <form className=\"form\" onSubmit={this.handlerSubmit}>\n                <label htmlFor=\"contactName\" >Name</label>\n                <input name=\"name\" onChange={this.handleChange} value={name} type=\"text\"/>\n                <label htmlFor=\"contactNumber\" >Number</label>\n                <input name=\"number\" onChange={this.handleChange} value={number} type=\"number\"/>\n                <button type=\"submit\">Add Contact</button>\n            </form>\n        )\n    };\n\n};\n\nconst mapDispatchToProps = {\n    addNumber,\n};\n\nconst mapStateToProps = state => ({\n    contacts: getContactsArr(state),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import {addNumberRequest, addNumberError, addNumberSuccess, deleteContactRequest, deleteContactSuccess, deleteContactError} from '../actions/editContactAction';\nimport {getNumberRequest, getNumberSuccess, getNumberError} from '../actions/getContactsAction';\nimport axios from 'axios';\n\nexport const addNumber = contact => dispatch => {\n    dispatch(addNumberRequest());\n\n    axios.post('http://localhost:2000/contacts', contact).then(res => dispatch(addNumberSuccess(contact))).catch(err => dispatch(addNumberError()))\n};\n\nexport const getContacts = () => dispatch => {\n    dispatch(getNumberRequest());\n\n    axios.get('http://localhost:2000/contacts').then(({data}) => dispatch(getNumberSuccess(data))).catch(err => dispatch(getNumberError()))\n};\n\nexport const deleteContacts = (id) => dispatch => {\n    dispatch(deleteContactRequest());\n\n    axios.delete(`http://localhost:2000/contacts/${id}`).then(res => dispatch(deleteContactSuccess(id)))\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport './Contacts.css';\nimport {deleteContacts} from '../../redux/operations/operations';\nimport {connect} from 'react-redux';\n\nclass Contacts extends Component {\n\n    static propTypes = {\n        contacts: PropTypes.arrayOf(PropTypes.object),\n        deleteContacts: PropTypes.func,\n      };\n\n    render() {\n        \n        const {contacts, deleteContacts} = this.props;\n        \n        return (\n            <TransitionGroup component=\"ul\">\n\n                {\n                    contacts.map(el => {\n                        return (\n                            <CSSTransition key={el.id} timeout={250} classNames=\"contact\">\n                                <li >{el.name}: {el.number} <button type=\"button\" onClick={() => deleteContacts(el.id)}>Delete</button></li>\n                            </CSSTransition>\n                        )\n                    })\n                }\n\n            </TransitionGroup>\n    )}\n\n};\n\nconst mapDispatchToProps = {\n    deleteContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(Contacts);","// import types from '../types.js';\nimport {createAction} from '@reduxjs/toolkit';\n\nexport const filterContact = createAction(\"FILTER_CONTACTS\");\n\n// export const filterContact = (filter) => ({\n//     type: types.FILTER_CONTACTS,\n//     payload: {\n//         filter,\n//     }\n// })","import React, { Component } from 'react';\nimport './Filter.css';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {filterContact} from '../../redux/actions/filterAction';\n\nclass Filter extends Component { \n\n  static propTypes = {\n    filter: PropTypes.string,\n  };\n\n  state = {\n    value: \"\",\n  };\n\n  handleFilter = (e) => {\n\n    const filter = e.target.value;\n    this.setState({value: filter})\n    this.props.filterContact(filter);\n\n  };\n  \n  render () {\n\n    const {filter} = this.props;\n\n    return (\n\n        <div className=\"input\">\n                <input type=\"text\" onChange={this.handleFilter} value={this.state.value} />\n        </div>\n\n    );\n  };\n};\n\nconst mapDispatchToProps = {\n  filterContact,\n}\n\nconst mapStateToProps = state => ({\n  filter: state.filter,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\n\nconst Alert = (props) => { \n\n  return (\n    <div><h2>This contact is already exist!</h2><button onClick={props.ok}>OK</button></div>\n  )\n  \n};\n\nexport default Alert;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Form from '../Form/Form';\nimport Contacts from '../Contascts/Contacts';\nimport Filter from '../Filter/Filter';\nimport Alert from '../Alert/Alert';\nimport {CSSTransition} from 'react-transition-group';\nimport {connect} from 'react-redux';\nimport {getContacts} from '../../redux/operations/operations';\nimport {getContactsArr, getFilter} from '../../redux/selectors';\n\nclass App extends Component {\n\n    state = {\n        showLogo: false,\n        contactExist: false\n    };\n\n    componentDidMount() {\n        this.props.getContacts();\n        this.setState(state => ({showLogo: !state.showLogo}));\n    };\n\n    findContact = () => {\n        const {contacts, filterWord} = this.props;\n            return contacts.filter(contact => contact.name.toLowerCase().includes(filterWord.toLowerCase()),\n        );\n    };\n\n    checkContact = (contacts, contact) => {\n\n        if (contacts.find((el) => el.name === contact.name)) {\n            this.setState({contactExist: true}) \n            return true;\n        };\n\n        return false;\n        \n    };\n\n    alertOk = () => {\n        this.setState({contactExist: false})\n    };\n\n    render() {\n\n        const {showLogo, contactExist} = this.state;\n        const {filter} = this.props;\n        const searchedContacts = this.findContact();\n\n        return (\n            <>\n                <CSSTransition in={showLogo} unmountOnExit classNames=\"logo\" timeout={500}>\n                    <h1>Phonebook</h1>\n                </CSSTransition>\n                <h2>Contacts form</h2>\n                <Form checkContact={this.checkContact} />\n                <h2>Contacts list</h2>\n                <Filter filter={filter} handleFilter={this.handleFilter} />\n                <Contacts contacts={searchedContacts} />\n                <CSSTransition in={contactExist} unmountOnExit classNames=\"alert\" timeout={250}>\n                    <Alert ok={this.alertOk} />\n                </CSSTransition>\n            </>\n        );\n\n    };\n\n};\n\nconst mapDispatchToProps = {\n    getContacts\n};\n\nconst mapStateToProps = state => ({\n    contacts: getContactsArr(state),\n    filterWord: getFilter(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// import types from '../types.js';\nimport {getNumberRequest, getNumberSuccess, getNumberError} from '../actions/getContactsAction';\nimport {addNumberRequest, addNumberSuccess, addNumberError, deleteContactRequest, deleteContactSuccess, deleteContactError} from '../actions/editContactAction';\nimport {createReducer} from '@reduxjs/toolkit';\n\nconst init = [];\n\nexport const editContacts = createReducer(init, {\n    [getNumberRequest.type]: (state) => state,\n    [getNumberSuccess.type]: (state, {payload}) => payload,\n    [getNumberError.type]: (state) => state,\n    [addNumberRequest.type]: (state) => state,\n    [addNumberSuccess.type]: (state, {payload}) => [...state, payload],\n    [addNumberError.type]: (state) => state,\n    [deleteContactRequest.type]: (state) => state,\n    [deleteContactSuccess.type]: (state, {payload}) => (state.filter(contact => contact.id !== payload)),\n    [deleteContactError.type]: (state) => state,\n})\n\n// export const editContacts = (state = init, {type, payload}) => {\n//     switch (type) {\n//         case types.ADD_CONTACT:\n//             return [...state, {...payload}];\n//         case types.DELETE_CONTACT:\n//             return state.filter(contact => contact.id !== payload.id)\n//         default:\n//             return state; \n//     }\n// }","// import types from '../types.js';\nimport {filterContact} from '../actions/filterAction';\nimport {createReducer} from '@reduxjs/toolkit';\n\n// const init = \"\";\n\nexport const filterContacts = createReducer(\"\", {\n    [filterContact.type]: (state, action) => action.payload\n});\n\n// export const filterContacts = (state = init, {type, payload}) => {\n//     switch (type) {\n//         case types.FILTER_CONTACTS:\n//             return payload.filter;\n//         default:\n//             return state; \n//     }\n// }","import {combineReducers} from 'redux';\nimport {editContacts} from '../reducers/editContactReducer';\nimport {filterContacts} from '../reducers/filterReducer';\n\nconst rootReducer = combineReducers({\n    contacts: editContacts,\n    filter: filterContacts,\n})\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './rootReducer';\nimport {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware()]\n});\n  \nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/store\";\n\nReactDOM.render(\n  <Provider store={store} >\n  <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}